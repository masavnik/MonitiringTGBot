import asyncio
from aiogram.fsm.context import FSMContext
from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery
from parsing.parsing_wb import ParsingWB
from keyboards.inline import answer_link, menu_link_kb, exit_menu_kb
from sql.bot_sql import sql
from utils.states import AddProduct

router = Router()


@router.callback_query(F.data == 'add_product')
async def answer_link_user(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.update_data(add_product=callback.message.text)
    await state.set_state(AddProduct.data)
    await callback.message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏ —è –±—É–¥—É –µ–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å\n'
             '–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É - /price',
        reply_markup=exit_menu_kb
    )
    await bot.delete_message(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id
    )


@router.message(F.text, AddProduct.data)
async def get_link_user(message: Message, bot: Bot, state: FSMContext):
    pars_wb = ParsingWB(message.text)
    all_data = pars_wb.get_data()
    photo = pars_wb.get_photo_product()

    if 'wildberries' not in message.text:
        # –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏–ª–æ—Å—å –Ω–µ —Ç–æ–ª—å–∫–æ wildberies
        await message.answer(
            f'<b>{message.from_user.first_name}</b> –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å'
            f'–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ <b>WILDBERRIES.</b>'
        )
    if message.text in sql.look_link(message.from_user.id):
        await message.answer(
            text=f'–¢–æ–≤–∞—Ä –ø–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–æ–º - <b>{all_data["–ê—Ä—Ç–∏–∫—É–ª"]}</b> —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ',
            reply_markup=exit_menu_kb
        )

    else:
        sent = await bot.send_message(message.chat.id, '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞üïê')
        animation = "üïëüïíüïìüïîüïïüïñüïóüïòüïôüïöüïõüïê"
        for i in range(10):
            await bot.edit_message_text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞{animation[i % len(animation)]}", message.chat.id,
                                        sent.message_id)
            await asyncio.sleep(0.1)
        await bot.delete_message(message.chat.id, sent.message_id)

        await state.update_data(
            link=message.text,
            name=all_data["–ò–º—è —Ç–æ–≤–∞—Ä–∞"],
            price=all_data["–¶–µ–Ω–∞"],
            count=all_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"],
            article=all_data['–ê—Ä—Ç–∏–∫—É–ª']
        )

        await bot.send_photo(
            message.chat.id,
            photo=photo,
            caption=f'üíé–ê—Ä—Ç–∏–∫—É–ª: <b>{all_data["–ê—Ä—Ç–∏–∫—É–ª"]}</b>\n'
                    f'üîπ–ë—Ä–µ–Ω–¥: <b>{all_data["–ë—Ä–µ–Ω–¥"]}</b>\n'
                    f'üü£–ò–º—è —Ç–æ–≤–∞—Ä–∞: <b>{all_data["–ò–º—è —Ç–æ–≤–∞—Ä–∞"]}</b>\n'
                    f'‚≠êÔ∏è–†–µ–π—Ç–∏–Ω–≥: <b>{all_data["–†–µ–π—Ç–∏–Ω–≥"]}</b>\n'
                    f'üì¶–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: <b>{all_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]} —à—Ç.</b>\n'
                    f'üí∞–¶–µ–Ω–∞: <b>{all_data["–¶–µ–Ω–∞"]} —Ä—É–±.</b>\n',
            reply_markup=answer_link
        )



    await state.set_state(AddProduct.link)


@router.callback_query(F.data == 'save', AddProduct.link)
async def save_data(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(AddProduct.yes_add)
    data = await state.update_data(callback.message.text)
    link, name, price, count, article = data['link'], data['name'], data['price'], data['count'], data['article']

    sql.add_users(
        user_id=callback.from_user.id,
        article=article,
        product=name,
        price=price,
        count=count,
        link=link
    )

    await callback.answer('‚úÖ–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await callback.message.answer(
        text=f'üü£<b>{callback.from_user.first_name}, </b> –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å\n'
             f'–í–≤–µ–¥–∏ /price, —á—Ç–æ–±—ã —è –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ü–µ–Ω—É',
        reply_markup=menu_link_kb
    )


@router.callback_query(F.data == 'nosave', AddProduct.link)
async def save_data(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(AddProduct.no_add)
    await callback.message.answer(
        text=f'üü£<b>{callback.from_user.first_name}, </b> –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å\n',
        reply_markup=menu_link_kb
    )
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await state.clear()
