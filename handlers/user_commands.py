from aiogram.fsm.context import FSMContext
from aiogram import Router, Bot, F
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.types import Message, CallbackQuery
from parsing_wb import ParsingWB
from keyboards.inline import answer_link
from utils.states import LinkUser
from bot_sql import sql

router = Router()


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.set_state(LinkUser.link)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>. '
                         f'–Ø –ë–û–¢, –∫–æ—Ç–æ—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ü–µ–Ω—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ <b>WILDBERRIES.</b>\n'
                         f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –∏ –Ω–∞—á–Ω—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞\n'
                         f'\n'
                         f'P.S.\n'
                         f'<b>–°–µ–π—á–∞—Å —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã,'
                         f'–Ω–∞–ø–∏—à–∏ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é</b> - @masavnik')


@router.message(F.text, LinkUser.link)
async def get_link_user(message: Message, bot: Bot, state: FSMContext):
    if 'wildberries' not in message.text:
        # –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏–ª–æ—Å—å –Ω–µ —Ç–æ–ª—å–∫–æ wildberies
        await message.answer(
            f'<b>{message.from_user.first_name}</b> –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å'
            f'–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ <b>WILDBERRIES.</b>'
        )
    else:
        pars_wb = ParsingWB(message.text)
        all_data = pars_wb.get_data()
        photo = pars_wb.get_photo_product()
        await state.update_data(
            link=message.text,
            name=all_data["–ò–º—è —Ç–æ–≤–∞—Ä–∞"],
            price=all_data["–¶–µ–Ω–∞"],
            count=all_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        )
        await bot.send_photo(
            message.chat.id,
            photo=photo,
            caption=f'üíé–ê—Ä—Ç–∏–∫—É–ª: <b>{all_data["–ê—Ä—Ç–∏–∫—É–ª"]}</b>\n'
                    f'üîπ–ë—Ä–µ–Ω–¥: <b>{all_data["–ë—Ä–µ–Ω–¥"]}</b>\n'
                    f'üü£–ò–º—è —Ç–æ–≤–∞—Ä–∞: <b>{all_data["–ò–º—è —Ç–æ–≤–∞—Ä–∞"]}</b>\n'
                    f'‚≠êÔ∏è–†–µ–π—Ç–∏–Ω–≥: <b>{all_data["–†–µ–π—Ç–∏–Ω–≥"]}</b>\n'
                    f'üì¶–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: <b>{all_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]} —à—Ç.</b>\n'
                    f'üí∞–¶–µ–Ω–∞: <b>{all_data["–¶–µ–Ω–∞"]} —Ä—É–±.</b>\n',
            reply_markup=answer_link
        )

        await state.set_state(LinkUser.data)


@router.callback_query(F.data == 'save', LinkUser.data)
async def save_data(callback: CallbackQuery, state: FSMContext):
    data = await state.update_data(callback.message.text)
    link, name, price, count = data['link'], data['name'], data['price'], data['count']
    sql.add_users(
        user_id=callback.from_user.id,
        product=name,
        price=price,
        count=count,
        link=link
    )
    await callback.message.answer('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')


@router.callback_query(F.data == 'nosave')
async def save_data(callback: CallbackQuery):
    await callback.message.answer('–û–∫')
